Отчет по лабораторной работе
"Битовые операции в языке C"

Содержание:
1. Задание 1: Вывод двоичного представления целого положительного числа
2. Задание 2: Вывод двоичного представления целого отрицательного числа
3. Задание 3: Подсчет единиц в двоичном представлении целого положительного числа
4. Задание 4: Замена третьего байта в целом положительном числе

1. Задание 1: Вывод двоичного представления целого положительного числа

Описание решения:
Для вывода двоичного представления целого положительного числа используется побитовый сдвиг вправо и операция побитового "И".
Программа запрашивает у пользователя целое положительное число, проверяет его на корректность (должно быть неотрицательным) и выводит его двоичное представление.

Алгоритм решения:
1. Запрос числа у пользователя
2. Проверка, что число положительное
3. Если число равно 0, выводим "0" и завершаем программу
4. Перебираем все биты числа, начиная с самого старшего (31-й бит для типа int)
5. Для каждого бита:
   - Получаем значение бита с помощью операций сдвига и побитового "И"
   - Пропускаем ведущие нули
   - Выводим значение бита (0 или 1)

Особенности реализации:
- Используется переменная leading_zeros для пропуска ведущих нулей
- Для получения значения i-го бита используется выражение (num >> i) & 1
- Программа корректно обрабатывает случай, когда введено число 0

Исходный код:
c
/
  Задание 1: Вывести двоичное представление целого положительного числа,
  используя битовые операции (число вводится с клавиатуры).
 /

#include <stdio.h>
#include <stdlib.h>

int main() {
    int num;
    int i;
    int bit;
    int leading_zeros = 1;
    
    printf("Введите целое положительное число: ");
    scanf("%d", &num);
    
    if (num < 0) {
        printf("Ошибка: введено отрицательное число.\n");
        return 1;
    }
    
    printf("Двоичное представление числа %d: ", num);
    
    // Если число равно 0, выводим 0
    if (num == 0) {
        printf("0\n");
        return 0;
    }
    
    // Перебираем все биты числа, начиная с самого старшего (31-й бит для int)
    for (i = 31; i >= 0; i--) {
        // Получаем значение i-го бита
        bit = (num >> i) & 1;
        
        // Пропускаем ведущие нули
        if (bit == 0 && leading_zeros) {
            continue;
        }
        
        // Как только встретили первую 1, перестаем пропускать нули
        if (bit == 1) {
            leading_zeros = 0;
        }
        
        printf("%d", bit);
    }
    
    printf("\n");
    return 0;
}

2. Задание 2: Вывод двоичного представления целого отрицательного числа

Описание решения:
Для вывода двоичного представления целого отрицательного числа также используется побитовый сдвиг вправо и операция побитового "И". Отличие от первого задания заключается в том, что для отрицательных чисел важно вывести все 32 бита (для типа int), так как отрицательные числа представляются в дополнительном коде.

Алгоритм решения:
1. Запрос числа у пользователя
2. Проверка, что число отрицательное
3. Перебираем все 32 бита числа, начиная с самого старшего
4. Для каждого бита:
   - Получаем значение бита с помощью операций сдвига и побитового "И"
   - Выводим значение бита (0 или 1)

Особенности реализации:
- В отличие от первого задания, выводятся все 32 бита, включая ведущие нули
- Для отрицательных чисел старший бит всегда будет равен 1 (признак отрицательного числа в дополнительном коде)
- Программа проверяет, что введенное число действительно отрицательное

Исходный код:
c
/
  Задание 2: Вывести двоичное представление целого отрицательного числа,
  используя битовые операции (число вводится с клавиатуры).
 /

#include <stdio.h>
#include <stdlib.h>

int main() {
    int num;
    int i;
    int bit;
    
    printf("Введите целое отрицательное число: ");
    scanf("%d", &num);
    
    if (num >= 0) {
        printf("Ошибка: введено неотрицательное число.\n");
        return 1;
    }
    
    printf("Двоичное представление числа %d: ", num);
    
    // Перебираем все биты числа (32 бита для int)
    for (i = 31; i >= 0; i--) {
        // Получаем значение i-го бита
        bit = (num >> i) & 1;
        printf("%d", bit);
    }
    
    printf("\n");
    return 0;
}

3. Задание 3: Подсчет единиц в двоичном представлении целого положительного числа

Описание решения:
Для подсчета количества единиц в двоичном представлении целого положительного числа используется перебор всех битов числа с помощью побитового сдвига и операции побитового "И". Программа запрашивает у пользователя целое положительное число, проверяет его на корректность и подсчитывает количество единиц в его двоичном представлении.

Алгоритм решения:
1. Запрос числа у пользователя
2. Проверка, что число положительное
3. Инициализация счетчика единиц нулем
4. Перебираем все 32 бита числа
5. Для каждого бита:
   - Проверяем, равен ли бит 1 с помощью операций сдвига и побитового "И"
   - Если бит равен 1, увеличиваем счетчик
6. Выводим результат

Особенности реализации:
- Используется переменная count для подсчета количества единиц
- Для проверки значения i-го бита используется выражение (num >> i) & 1
- Программа проверяет все 32 бита, даже если старшие биты равны нулю

Исходный код:
c
/
  Задание 3: Найти количество единиц в двоичном представлении целого
  положительного числа (число вводится с клавиатуры).
 /

#include <stdio.h>
#include <stdlib.h>

int main() {
    int num;
    int count = 0;
    int i;
    
    printf("Введите целое положительное число: ");
    scanf("%d", &num);
    
    if (num < 0) {
        printf("Ошибка: введено отрицательное число.\n");
        return 1;
    }
    
    // Метод подсчета единиц с помощью битовых операций
    for (i = 0; i < 32; i++) {
        // Проверяем каждый бит числа
        if ((num >> i) & 1) {
            count++;
        }
    }
    
    printf("Количество единиц в двоичном представлении числа %d: %d\n", num, count);
    
    return 0;
}

4. Задание 4: Замена третьего байта в целом положительном числе

Описание решения:
Для замены третьего байта в целом положительном числе используются операции побитового "И" с инверсией и побитового "ИЛИ". Программа запрашивает у пользователя целое положительное число и значение для третьего байта, проверяет их на корректность и выполняет замену.

Алгоритм решения:
1. Запрос исходного числа у пользователя
2. Проверка, что число положительное
3. Запрос значения для третьего байта (0-255)
4. Проверка, что значение байта находится в допустимом диапазоне
5. Очистка третьего байта в исходном числе с помощью операции побитового "И" с инверсией
6. Установка нового значения третьего байта с помощью операции побитового "ИЛИ"
7. Вывод результата

Особенности реализации:
- Третий байт соответствует битам с 16 по 23 (нумерация с 0)
- Для очистки третьего байта используется выражение (original_num & ~(0xFF << 16))
- Для установки нового значения используется выражение (new_byte << 16)
- Программа выводит результат в десятичном и шестнадцатеричном форматах для наглядности

Исходный код:
c
/
  Задание 4: Поменять в целом положительном числе (типа int) значение третьего
  байта на введенное пользователем число (изначальное число также
  вводится с клавиатуры).
 /

#include <stdio.h>
#include <stdlib.h>

int main() {
    int original_num;
    int new_byte;
    int result;
    
    printf("Введите целое положительное число: ");
    scanf("%d", &original_num);
    
    if (original_num < 0) {
        printf("Ошибка: введено отрицательное число.\n");
        return 1;
    }
    
    printf("Введите значение для третьего байта (0-255): ");
    scanf("%d", &new_byte);
    
    if (new_byte < 0 || new_byte > 255) {
        printf("Ошибка: значение байта должно быть в диапазоне от 0 до 255.\n");
        return 1;
    }
    
    // Очищаем третий байт (биты 16-23) и устанавливаем новое значение
    result = (original_num & ~(0xFF << 16)) | (new_byte << 16);
    
    printf("Исходное число: %d (0x%X)\n", original_num, original_num);
    printf("Новое значение третьего байта: %d (0x%X)\n", new_byte, new_byte);
    printf("Результат: %d (0x%X)\n", result, result);
    
    return 0;
}

Заключение:

Все программы разработаны с учетом требований задания и готовы к использованию в среде Visual Studio 17. 
Каждая программа содержит проверку входных данных на корректность и выводит понятные сообщения об ошибках при необходимости с использованием комментариев для улучшения читаемости.
Для каждой задачи создан отдельный проект Visual Studio 17, что позволяет легко компилировать и запускать программы независимо друг от друга.
